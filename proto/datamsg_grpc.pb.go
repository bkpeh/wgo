// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package datamsg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SetTransactionInfoClient is the client API for SetTransactionInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SetTransactionInfoClient interface {
	SetTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionReply, error)
}

type setTransactionInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewSetTransactionInfoClient(cc grpc.ClientConnInterface) SetTransactionInfoClient {
	return &setTransactionInfoClient{cc}
}

func (c *setTransactionInfoClient) SetTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionReply, error) {
	out := new(TransactionReply)
	err := c.cc.Invoke(ctx, "/datamsg.SetTransactionInfo/SetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SetTransactionInfoServer is the server API for SetTransactionInfo service.
// All implementations must embed UnimplementedSetTransactionInfoServer
// for forward compatibility
type SetTransactionInfoServer interface {
	SetTransaction(context.Context, *Transaction) (*TransactionReply, error)
	mustEmbedUnimplementedSetTransactionInfoServer()
}

// UnimplementedSetTransactionInfoServer must be embedded to have forward compatible implementations.
type UnimplementedSetTransactionInfoServer struct {
}

func (UnimplementedSetTransactionInfoServer) SetTransaction(context.Context, *Transaction) (*TransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTransaction not implemented")
}
func (UnimplementedSetTransactionInfoServer) mustEmbedUnimplementedSetTransactionInfoServer() {}

// UnsafeSetTransactionInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SetTransactionInfoServer will
// result in compilation errors.
type UnsafeSetTransactionInfoServer interface {
	mustEmbedUnimplementedSetTransactionInfoServer()
}

func RegisterSetTransactionInfoServer(s grpc.ServiceRegistrar, srv SetTransactionInfoServer) {
	s.RegisterService(&_SetTransactionInfo_serviceDesc, srv)
}

func _SetTransactionInfo_SetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetTransactionInfoServer).SetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamsg.SetTransactionInfo/SetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetTransactionInfoServer).SetTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _SetTransactionInfo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datamsg.SetTransactionInfo",
	HandlerType: (*SetTransactionInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTransaction",
			Handler:    _SetTransactionInfo_SetTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/datamsg.proto",
}

// GetBooksInfoClient is the client API for GetBooksInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetBooksInfoClient interface {
	GetBooks(ctx context.Context, in *BookQuery, opts ...grpc.CallOption) (*Books, error)
}

type getBooksInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewGetBooksInfoClient(cc grpc.ClientConnInterface) GetBooksInfoClient {
	return &getBooksInfoClient{cc}
}

func (c *getBooksInfoClient) GetBooks(ctx context.Context, in *BookQuery, opts ...grpc.CallOption) (*Books, error) {
	out := new(Books)
	err := c.cc.Invoke(ctx, "/datamsg.GetBooksInfo/GetBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetBooksInfoServer is the server API for GetBooksInfo service.
// All implementations must embed UnimplementedGetBooksInfoServer
// for forward compatibility
type GetBooksInfoServer interface {
	GetBooks(context.Context, *BookQuery) (*Books, error)
	mustEmbedUnimplementedGetBooksInfoServer()
}

// UnimplementedGetBooksInfoServer must be embedded to have forward compatible implementations.
type UnimplementedGetBooksInfoServer struct {
}

func (UnimplementedGetBooksInfoServer) GetBooks(context.Context, *BookQuery) (*Books, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedGetBooksInfoServer) mustEmbedUnimplementedGetBooksInfoServer() {}

// UnsafeGetBooksInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetBooksInfoServer will
// result in compilation errors.
type UnsafeGetBooksInfoServer interface {
	mustEmbedUnimplementedGetBooksInfoServer()
}

func RegisterGetBooksInfoServer(s grpc.ServiceRegistrar, srv GetBooksInfoServer) {
	s.RegisterService(&_GetBooksInfo_serviceDesc, srv)
}

func _GetBooksInfo_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetBooksInfoServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datamsg.GetBooksInfo/GetBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetBooksInfoServer).GetBooks(ctx, req.(*BookQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetBooksInfo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datamsg.GetBooksInfo",
	HandlerType: (*GetBooksInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBooks",
			Handler:    _GetBooksInfo_GetBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/datamsg.proto",
}
